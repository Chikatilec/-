from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaPhoto
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext

BOT_TOKEN = '8157906074:AAGuP4FGIypt9RIII4W_s35luxDL0_-dONQ'
ADMIN_ID = 6794301033  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

users_data = {}

routes = {
    "route1": {
        "name": "–ì–æ—Ä—ã –∏ –∫–∞–Ω—å–æ–Ω—ã",
        "stops": [
            "üìç –°—É–ª–∞–∫—Å–∫–∏–π –∫–∞–Ω—å–æ–Ω ‚Äî –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –≥–ª—É–±–æ–∫–∏—Ö –≤ –º–∏—Ä–µ.",
            "üìç –ì–æ—Ä–∞ –®–∞–ª–±—É–∑–¥–∞–≥ ‚Äî —Å–≤—è—â–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–≤–µ—Ä—à–∞—é—Ç –ø–∞–ª–æ–º–Ω–∏—á–µ—Å—Ç–≤–æ.",
            "üìç –ö–∞—Ä–∞–¥–∞—Ö—Å–∫–∞—è —Ç–µ—Å–Ω–∏–Ω–∞ ‚Äî —É–∑–∫–∏–π –∏ –∂–∏–≤–æ–ø–∏—Å–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –º–µ–∂–¥—É —Å–∫–∞–ª."
        ],
        "test": [
            {
                "q": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –≥–ª—É–±–æ–∫–∏—Ö –∫–∞–Ω—å–æ–Ω–æ–≤ –≤ –º–∏—Ä–µ –≤ –î–∞–≥–µ—Å—Ç–∞–Ω–µ?",
                "a": "–°—É–ª–∞–∫—Å–∫–∏–π –∫–∞–Ω—å–æ–Ω"
            }
        ]
    },
    "route2": {
        "name": "–ú–æ—Ä–µ –∏ –≥–æ—Ä–æ–¥–∞",
        "stops": [
            "üìç –ö–∞—Å–ø–∏–π—Å–∫–æ–µ –º–æ—Ä–µ ‚Äî –∫—Ä—É–ø–Ω–µ–π—à–µ–µ –∑–∞–º–∫–Ω—É—Ç–æ–µ –º–æ—Ä–µ –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ.",
            "üìç –î–µ—Ä–±–µ–Ω—Ç ‚Äî –æ–¥–∏–Ω –∏–∑ –¥—Ä–µ–≤–Ω–µ–π—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏.",
            "üìç –ú–∞—Ö–∞—á–∫–∞–ª–∞ ‚Äî —Å—Ç–æ–ª–∏—Ü–∞ –î–∞–≥–µ—Å—Ç–∞–Ω–∞, –∫—É–ª—å—Ç—É—Ä–Ω—ã–π —Ü–µ–Ω—Ç—Ä."
        ],
        "test": [
            {
                "q": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–∞ –î–∞–≥–µ—Å—Ç–∞–Ω–∞?",
                "a": "–ú–∞—Ö–∞—á–∫–∞–ª–∞"
            }
        ]
    },
    "route3": {
        "name": "–ò—Å—Ç–æ—Ä–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞",
        "stops": [
            "üìç –ê—É–ª –ö—É–±–∞—á–∏ ‚Äî –∑–Ω–∞–º–µ–Ω–∏—Ç —Å–≤–æ–∏–º–∏ —Ä–µ–º–µ—Å–ª–µ–Ω–Ω–∏–∫–∞–º–∏.",
            "üìç –•—É–Ω–∑–∞—Ö ‚Äî —Ä–æ–¥–∏–Ω–∞ –ø–æ—ç—Ç–æ–≤ –∏ –≥–æ—Ä—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã.",
            "üìç –ì—É–Ω–∏–± ‚Äî –º–µ—Å—Ç–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å—Ä–∞–∂–µ–Ω–∏–π."
        ],
        "test": [
            {
                "q": "–ö–∞–∫–æ–π –∞—É–ª –∑–Ω–∞–º–µ–Ω–∏—Ç —é–≤–µ–ª–∏—Ä–∞–º–∏ –∏ –æ—Ä—É–∂–µ–π–Ω–∏–∫–∞–º–∏?",
                "a": "–ö—É–±–∞—á–∏"
            }
        ]
    }
}

def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    users_data[user_id] = {"path": None, "step": 0, "papakhas": 0}
    buttons = [
        [InlineKeyboardButton(routes[r]["name"], callback_data=f"start_{r}")]
        for r in routes
    ]
    update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –ø–æ –î–∞–≥–µ—Å—Ç–∞–Ω—É! –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:", reply_markup=InlineKeyboardMarkup(buttons))

def handle_button(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    query.answer()

    if data.startswith("start_"):
        route_key = data.split("_")[1]
        users_data[user_id]["path"] = route_key
        users_data[user_id]["step"] = 0
        send_step(query, user_id)
    elif data == "next":
        users_data[user_id]["step"] += 1
        send_step(query, user_id)
    elif data == "back":
        users_data[user_id]["step"] -= 1
        send_step(query, user_id)
    elif data == "menu":
        start(update, context)
    elif data == "start_test":
        send_test(query, user_id)
    elif data == "send_photos":
        query.edit_message_text("üì∏ –ó–∞–¥–∞–Ω–∏–µ:\n1. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –æ–¥–Ω–æ –∏–∑ –º–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∞.\n2. –°–¥–µ–ª–∞–π—Ç–µ —Å–µ–ª—Ñ–∏ —Å –ø—Ä–∏—Ä–æ–¥–æ–π –î–∞–≥–µ—Å—Ç–∞–Ω–∞.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ 2 —Ñ–æ—Ç–æ –±–æ—Ç—É.")
        users_data[user_id]["awaiting_photos"] = True
    elif data == "check_reward":
        check_certificate(query, user_id)

def send_step(query, user_id):
    route_key = users_data[user_id]["path"]
    step = users_data[user_id]["step"]
    stops = routes[route_key]["stops"]

    if step < 0: step = 0
    if step >= len(stops):
        query.edit_message_text(
            f"üèÅ –í—ã –ø—Ä–æ—à–ª–∏ –º–∞—Ä—à—Ä—É—Ç: {routes[route_key]['name']}!\n–ü–æ—Ä–∞ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üß™ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test")]
            ])
        )
        return

    text = stops[step]
    buttons = []
    if step > 0:
        buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    if step < len(stops) - 1:
        buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è –î–∞–ª–µ–µ", callback_data="next"))
    else:
        buttons.append(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="next"))
    buttons.append(InlineKeyboardButton("üìç –í –º–µ–Ω—é", callback_data="menu"))

    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup([buttons]))

def send_test(query, user_id):
    route_key = users_data[user_id]["path"]
    question = routes[route_key]["test"][0]
    context = query.message.bot
    context.send_message(user_id, f"üß™ –í–æ–ø—Ä–æ—Å:\n{question['q']}")
    users_data[user_id]["awaiting_answer"] = question["a"]

def handle_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_data = users_data.get(user_id, {})

    if user_data.get("awaiting_answer"):
        correct_answer = user_data["awaiting_answer"]
        if correct_answer.lower() in update.message.text.lower():
            users_data[user_id]["papakhas"] += 5
            update.message.reply_text(f"‚úÖ –í–µ—Ä–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 5 –ø–∞–ø–∞—Ö. –í—Å–µ–≥–æ: {users_data[user_id]['papakhas']}")
            update.message.reply_text("üì∏ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è —Å —Ñ–æ—Ç–æ:", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="send_photos")],
                [InlineKeyboardButton("üéñ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã", callback_data="check_reward")]
            ]))
        else:
            update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ.")
        users_data[user_id]["awaiting_answer"] = None
    elif user_data.get("awaiting_photos"):
        if update.message.photo:
            context.bot.send_message(chat_id=ADMIN_ID, text=f"üì∑ –§–æ—Ç–æ –æ—Ç {update.effective_user.username or user_id}:")
            context.bot.forward_message(chat_id=ADMIN_ID, from_chat_id=user_id, message_id=update.message.message_id)
            update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ.")
    else:
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥.")

def check_certificate(query, user_id):
    if users_data[user_id]["papakhas"] >= 10:
        query.edit_message_text("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–±—Ä–∞–ª–∏ 10 –ø–∞–ø–∞—Ö –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!")
    else:
        query.edit_message_text(f"–£ –≤–∞—Å {users_data[user_id]['papakhas']} –ø–∞–ø–∞—Ö. –ù—É–∂–Ω–æ 10 –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.")

def main():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(handle_button))
    dp.add_handler(MessageHandler(Filters.text | Filters.photo, handle_message))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
